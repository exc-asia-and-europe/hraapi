#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hraapi:server');
var http = require('http');
var https = require('https');
var config = require('../config'); // get the config file

/**
 * Get port from environment and store in Express.
 */

var serverHttp = null,
  serverHttps = null;

if(config.http.enable){
  serverHttp = http.createServer(app).listen(config.http.options.port);
};

if(config.https.enable){
  serverHttps = https.createServer({
    key: config.https.options.key,
    cert: config.https.options.cert,
    passphrase: config.https.options.passphrase
  }, app).listen(config.https.options.port);
}


/*var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
*/
/**
 * Create HTTP server.
 */

/*var server = http.createServer(app);
*/
/**
 * Listen on provided port, on all network interfaces.
 */

/*server.listen(port);*/
serverHttp.on('error', onError);
serverHttp.on('listening', onListening);

serverHttps.on('error', onErrorHttps);
serverHttps.on('listening', onListeningHttps);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof config.http.options.port === 'string'
    ? 'Pipe ' + config.http.options.port
    : 'Port ' + config.http.options.port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = serverHttp.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onErrorHttps(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof config.https.options.port === 'string'
    ? 'Pipe ' + config.https.options.port
    : 'Port ' + config.https.options.port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onListeningHttps() {
  var addr = serverHttps.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
